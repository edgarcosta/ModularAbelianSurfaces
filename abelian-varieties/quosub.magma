//parallel --shuf --timeout 1000 --eta -j4 magma -b seq:={} quosub.magma ::: {1..10} >> quosubtests.out

AttachSpec("spec");

SetColumns(0);
SetAutoColumns(false);
SetDebugOnError(true);
seq := eval seq;
inputs := Split(Read("labelswithhecke.txt"), "\n");
input := inputs[seq];
s := Split(input, ":");
label := s[1];
level := StringToInteger(s[2]);
hc := eval s[3];
f:= MakeNewformModSym(level, hc);
prec := 100;
QQ := RationalsExtra(prec);
//time Pmap, n := PeriodMappingMatrix(f : prec:=prec);
Af := ModularAbelianVariety(f);

foo := NewformLattices(f);
Hsub, Esub := Explode(foo[1]);
Hquo, Equo := Explode(foo[2]);

Asub := ModularAbelianVariety(f);
J0N := ModularAbelianVariety(CuspidalSubspace(AmbientSpace(f)));
Aquo := J0N/Complement(Af);
Fs := [FrobeniusFormAlternating(E) : E in [Esub, Equo] cat [Matrix(Integers(), IntersectionPairingIntegral(A)) : A in [Asub, Aquo]]];
if Fs[1] eq Fs[3] and Fs[2] eq Fs[4] then
    print label, true;
else
    print label, Fs[1] eq Fs[3], Fs[2] eq Fs[4];
end if;
